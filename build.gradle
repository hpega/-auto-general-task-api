/*
 * This file was generated by the Gradle "init" task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.0/userguide/java_library_plugin.html
 */

import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator


buildscript {
	
	repositories {
		mavenCentral()
		jcenter()
	}
	
	dependencies {
		classpath("org.springframework:spring-context:5.1.6.RELEASE")
	    classpath("io.swagger:swagger-codegen:2.3.1")
	    classpath("io.swagger:swagger-annotations:1.5.13")
	    classpath("org.springframework.boot:spring-boot-starter:2.1.4.RELEASE")
		classpath("org.springframework.boot:spring-boot-starter-data-jpa:2.1.4.RELEASE")
		classpath("org.springframework.boot:spring-boot-starter-web:2.1.4.RELEASE")
		classpath("org.springframework.boot:spring-boot-starter-tomcat")
	    classpath("io.springfox:springfox-swagger2:2.7.0")
	    classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.4.RELEASE")
	    classpath("com.fasterxml.jackson.core:jackson-annotations:2.9.8")	 
	    classpath("org.threeten:threetenbp:1.3.8")   
	    classpath("com.github.joschi.jackson:jackson-datatype-threetenbp:2.6.4")
	    classpath("com.h2database:h2:1.4.199")
	    classpath("org.mockito:mockito-core:2.7.22")
	    classpath("junit:junit:4.12")
	}
}

repositories {
    jcenter()
    mavenCentral()
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "war"

bootJar {
    baseName = "web-content"
    version =  "1.0"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = "1.0"

repositories {
    mavenCentral()
}

configurations {
  generatedCompile
}

sourceSets {
  generated {
    compileClasspath = configurations.generatedCompile
  }
  main {
    compileClasspath += generated.output
    runtimeClasspath += generated.output
  }
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter:2.1.4.RELEASE"
	compile "org.springframework.boot:spring-boot-starter-data-jpa:2.1.4.RELEASE"
	compile "org.springframework.boot:spring-boot-starter-web:2.1.4.RELEASE"
	compileOnly "org.springframework.boot:spring-boot-starter-tomcat"
    compile "io.springfox:springfox-swagger2:2.7.0"
    compile "io.springfox:springfox-swagger-ui:2.7.0"
    compile "org.springframework.boot:spring-boot-gradle-plugin:2.1.4.RELEASE"
    compile "com.fasterxml.jackson.core:jackson-annotations:2.9.8"
    compile "org.threeten:threetenbp:1.3.8"
    compile "com.github.joschi.jackson:jackson-datatype-threetenbp:2.6.4"
    compile "com.h2database:h2:1.4.199"
    compile "org.springframework.boot:spring-boot-starter-test:2.1.4.RELEASE"
    
    generatedCompile "io.springfox:springfox-swagger2:2.5.0"
    generatedCompile "io.springfox:springfox-swagger-ui:2.5.0"
    generatedCompile "org.springframework.boot:spring-boot-starter:2.1.4.RELEASE"
	generatedCompile "org.springframework.boot:spring-boot-starter-data-jpa:2.1.4.RELEASE"
	generatedCompile "org.springframework.boot:spring-boot-starter-web:2.1.4.RELEASE"
	generatedCompile "org.threeten:threetenbp:1.3.8"
	generatedCompile "com.github.joschi.jackson:jackson-datatype-threetenbp:2.6.4"
	
	testCompile "junit:junit:4.12"
	testImplementation "org.mockito:mockito-core:2.7.22"
}

sourceSets {
    main {
        java {
            srcDir "${project.buildDir}/src/main/java"
            exclude "${project.buildDir}/src/main/java/io"
        }
    }
}

project.buildDir = "${rootProject.buildDir}/${project.name}"   

task customJar(type: Jar) {
    manifest {
        attributes "Main-Class": "com.auto.task.Application"
    }
 
   baseName = "com.auto"
   from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
   with jar
}

def swaggerSourceFile = "src/main/resources/autogeneral-api-swagger.json"
def swaggerTargetFolder = "src/main/java"

/**
* This task generates the client stubs from the contract file
**/ 
task generateApi {
  inputs.file("$projectDir/$swaggerSourceFile")
  outputs.dir("$projectDir/$swaggerTargetFolder")
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/$swaggerSourceFile")
    config.setOutputDir("$projectDir")
    config.setLang("spring")
    config.setAdditionalProperties([
        "interfaceOnly" : "true",
        "apiPackage"    : "com.auto.api",
        "modelPackage"  : "com.auto.model",
        "sourceFolder"  : swaggerTargetFolder
    ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}

compileGeneratedJava.dependsOn generateApi
classes.dependsOn generatedClasses
compileJava.dependsOn compileGeneratedJava

clean.doFirst {
  delete("${projectDir}/$swaggerTargetFolder")
}
